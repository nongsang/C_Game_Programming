#pragma once

void ScreenInit();		// 화면 초기화
void ScreenFlipping();	// 화면 전환
void ScreenClear();		// 화면 지우기
void ScreenRelease();	// 화면 삭제
void ScreenPrint(int x, int y, char* string);	// 대기화면 x, y위치에 문자열 출력
void SetColor(unsigned short color);		// 텍스트의 색깔 설정

// 1행
// #이 붙으면 전처리기에서 처리하는 명령어이다.
// pragme once는 한번만 읽어들이기 위한 명령어이다.
//
// #ifndef __SCREEN_H__
// #define __SCREEN_H__
// ...
// #endif
// 이렇게 정의해주어야 할 것을 #pragma once 하나로 처리해준다.
// #ifndef는 헤더가 추가될 때 마다 읽어줘야하지만 #pragma once그렇지 않으므로 #pragma once가 훨씬 이득이다.
// 헤더의 중복참조를 방지하기 위해서 해주는 방법인데 최신 컴파일러에서는 #pragma once를 지원한다.
// 하지만 오래된 컴파일러는 #pragma once를 지원하지 않으므로 #ifndef로 정의해줘야 할 것이다.

// 3행
// 전면버퍼와 후면버퍼를 생성해내는 함수이다.
// 화면을 표현함에 있어서 더블버퍼링과 페이지플리핑 방식이 존재하는데,
// 더블버퍼링은 후면버퍼에 그림을 그려주고 전면버퍼로 그림을 복사하여 화면에 보여주는 방식이다.
// 전면버퍼에서 화면에 보여주는 동안 후면버퍼는 다음 장면을 그리고 있고, 화면이 끝나면 같은 행동을 반복한다.
// 페이지플리핑은 전면버퍼와 후면버퍼의 주소값을 이용하여 서로 번갈아가면서 보여주는 방식이다.
// 요즘은 페이지플리핑을 더 많이 사용하므로 참고하길

// 4행
// 페이지플리핑처럼 활성화면과 비활성화면을 전환하는 함수이다.

// 5행
// 하나의 화면버퍼가 활성화되어 출력되고 있는 동안에 다음 장면을 위한 화면버퍼는 지우는 함수이다.

// 6행
// 생성한 두개의 화면을 삭제하는 함수다.

// 7행
// 대기하고 있는 화면 버퍼의 x, y위치에 문자열을 출력해준다.

// 8행
// 함수 호출이 되면 이후의 텍스트는 설정된 값으로 출력된다.